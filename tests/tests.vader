Before:
  set ft=java
  let jsid=VimJMessSID()
  let ApplyFun=function('<SNR>'.jsid.'apply_substitutions')
  let FormatDictFun=function('<SNR>'.jsid.'format_dict')
  let FormatJavapOutput=function('<SNR>'.jsid.'format_javap_output')
  let AutoWriteTypeVar=function('<SNR>'.jsid.'autowrite_type_var')
  let AutoWriteNewFromVar=function('<SNR>'.jsid.'autowrite_new_from_var')
  let GetPropertiesLineNumbers=function('<SNR>'.jsid.'get_property_line_numbers')
  let ExtractTypes=function('<SNR>'.jsid.'extract_types_from_props')
  let CleanProperty=function('<SNR>'.jsid.'clean_property')
Given:
Execute:
  call setline(1, ApplyFun('abstract void error(String, Throwable)'))
Expect:
  error(String, Throwable)
Given:
Execute:
  call setline(1, ApplyFun('public org.springframework.test.web.servlet.ResultActions perform(org.springframework.test.web.servlet.RequestBuilder)       throws java.lang.Exception;'))
Expect:
  org.springframework.test.web.servlet.ResultActions perform(org.springframework.test.web.servlet.RequestBuilder)       throws java.lang.Exception
Given:
Execute:
  let dict_ = FormatDictFun(['error(java.lang.String, java.lang.Throwable)'])[0]
  call setline(1, dict_['word'])
Expect:
  error()
Given:
Execute:
  let dict_ = FormatDictFun(['perform(org.springframework.test.web.servlet.RequestBuilder)       throws java.lang.Exception;'])[0]
  call setline(1, dict_['word'])
Expect:
  perform()
Given:
Execute:
  let lines=
    \ ['public final class org.springframework.test.web.servlet.MockMvc extends java.lang.Object{',
    \  '    public org.springframework.test.web.servlet.ResultActions perform(org.springframework.test.web.servlet.RequestBuilder)       throws java.lang.Exception;',
    \  '}']
  let lines=FormatJavapOutput(lines) 
  for l in lines | call append(line('$'), l) | endfor
  normal ggdd
Expect:
  org.springframework.test.web.servlet.ResultActions perform(org.springframework.test.web.servlet.RequestBuilder)       throws Exception;
Given:
  TheClassType
Do:
  A\<C-g>e
Expect:
  TheClassType theClassType
Given:
  theClassType
Do:
  A\<C-g>E
Expect:
  theClassType = new TheClassType();

Given:
  (TheClassType)
Do:
  ^f)i\<C-g>e
Expect:
  (TheClassType theClassType)
Given:
  public class AClass {
      private String string;
      private Integer integer;
  }
Execute:
  call append(line('$'), GetPropertiesLineNumbers())
Expect:
  public class AClass {
      private String string;
      private Integer integer;
  }
  2
  3
Given:
Execute:
  call append(0, ExtractTypes(['List<BigDecimal>', 'Map<String, Date>']))
  normal Gdd
Expect:
  List
  BigDecimal
  Map
  String
  Date
Given:
Execute:
  call append(0, CleanProperty('    private List<String> a = new ArrayList<String>();'))
  normal Gdd
Expect:
  List<String> a
